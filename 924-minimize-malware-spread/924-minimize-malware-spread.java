class Graph {
    
    List<Integer> [] adj;
    
    Graph( int n ){
        
        adj = new ArrayList[n];
        
        for( int i =0; i<n ; i++ ){
            adj[i] = new ArrayList<Integer>();
        }
    }
    
    public void addEdge( int src , int dest ){
        adj[src].add(dest);
        adj[dest].add(src);
    }
}

class Solution {
    
    int size , infected ;
    
    public void DFS (int src , boolean[] vis , Graph g , int[] initial ){
        
        if( vis[src] == true ) return ;
        vis[src] = true;
        
        size++;
        if( Arrays.binarySearch(initial , src ) >= 0 ) infected++ ;
        
        for( int ele : g.adj[src] ){
            DFS( ele , vis , g , initial );
        }
           
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        Graph g = new Graph(graph.length);
        
        for( int i =0; i<graph.length ; i++ ){
            for( int j =0; j<graph.length ; j++ ){
                
                if( graph[i][j] == 1 ){
                    g.addEdge( i , j );
                }
            }
        }
        
        Arrays.sort(initial);
        boolean[] vis = new boolean[graph.length];
        
        int maxSize = 0; int ans = initial[0];
        
        for( int ele : initial ){
            
            size = infected = 0;
            if( vis[ele] == false ){
                          DFS( ele , vis , g , initial );
            
            if( size > maxSize && infected == 1 ){
                maxSize = size;
                ans = ele;
            }  
            }

        }
        
        return ans;
    }
}