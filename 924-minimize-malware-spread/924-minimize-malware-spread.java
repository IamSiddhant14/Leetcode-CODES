class Graph {
    List<Integer>[] adj;

    Graph(int n) {
        adj = new ArrayList[n];

        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
    }

    public void addEdge(int src, int dest) {
        adj[src].add(dest);
        adj[dest].add(src);
    }
}

class Solution {
    int size;
    int infected;

    public void DFS(int src, Graph g, int[] initial, boolean[] vis) {
        if (vis[src] == true) return;
        vis[src] = true;

        size++;
        if (Arrays.binarySearch(initial, src) >= 0) infected++;

        for (int ele : g.adj[src]) {
            DFS(ele, g, initial, vis);
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Graph g = new Graph(graph.length);

        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph[0].length; j++) {
                if( graph[i][j] == 1 ){
                    g.addEdge( i , j );
                }
            }
        }

        Arrays.sort(initial);
        int ans = initial[0];
        int max = 0;

        boolean[] vis = new boolean[graph.length];

        for (int ele : initial ) {
            
            size = 0;
            infected = 0;
            
            if (vis[ele] == false) {
                
                DFS( ele , g , initial , vis );

                if (size > max && infected == 1) {
                    max = size;
                    ans = ele ;
                }
            }
        }

        return ans;
    }
}
